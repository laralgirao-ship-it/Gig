name: Build Android APK (Expo + Gradle)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  # candidatos comuns onde pode estar o app (ajuste se quiser)
  APP_CANDIDATES: . ROV_Project/ROV_VoiceApp app packages/app

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CI: "1" # ⬅️ modo não-interativo para Expo/EAS (evita --non-interactive). Docs recomendam CI. 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect APP_PATH
        id: detect
        shell: bash
        run: |
          set -e
          for p in $APP_CANDIDATES; do
            if [ -f "$p/package.json" ]; then APP_PATH="$p"; break; fi
          done
          if [ -z "${APP_PATH:-}" ]; then
            echo "Nenhum package.json encontrado nos candidatos: $APP_CANDIDATES"
            ls -la; exit 1
          fi
          echo "APP_PATH=$APP_PATH" | tee -a "$GITHUB_ENV"
          echo "LOG_DIR=$APP_PATH/_logs" | tee -a "$GITHUB_ENV"
          mkdir -p "$APP_PATH/_logs"
          echo "App path: $APP_PATH"

      - name: Show trees
        run: |
          echo "ROOT:"; ls -la
          echo "APP:";  ls -la "${APP_PATH}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # Patch seguro: remove react-native-voice antigo (se houver),
      # garante expo-speech e fixa react-native-svg @ 15.12.1 (aviso do Expo)
      - name: Patch package.json (safe)
        run: |
          node -e '
            const fs=require("fs"), p=process.env.APP_PATH+"/package.json";
            if(!fs.existsSync(p)){ console.log("Sem package.json; pulando patch."); process.exit(0); }
            const pkg=JSON.parse(fs.readFileSync(p,"utf8"));
            const d=pkg.dependencies||(pkg.dependencies={});
            if(d["react-native-voice"]){ delete d["react-native-voice"]; console.log("Removed react-native-voice"); }
            if(!d["expo-speech"]){ d["expo-speech"]="*"; console.log("Added expo-speech"); }
            if(d["react-native-svg"] && d["react-native-svg"]!=="15.12.1"){ d["react-native-svg"]="15.12.1"; console.log("Pinned react-native-svg@15.12.1"); }
            fs.writeFileSync(p, JSON.stringify(pkg,null,2)); console.log("Patched", p);
          '

      - name: Install dependencies
        working-directory: ${{ env.APP_PATH }}
        run: |
          npm install --no-audit --no-fund
          npx expo --version || npx --yes expo-cli --version || true

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses

      # prebuild cria a pasta android/ (CI=1 evita prompts).
      # app.config(.js) precisa ter android.package. 
      - name: Expo prebuild (Android)
        working-directory: ${{ env.APP_PATH }}
        run: |
          npx expo prebuild --platform android --no-install | tee "${LOG_DIR}/prebuild.log"

      # Só force gradle.properties se ele existir (após prebuild).
      - name: Force compile/target SDK 36 and AndroidX/Jetifier
        if: ${{ hashFiles(format('{0}/android/gradle.properties', env.APP_PATH)) != '' }}
        run: |
          G="${APP_PATH}/android/gradle.properties"
          sed -i 's/^android\.compileSdkVersion=.*/android.compileSdkVersion=36/g' "$G" || true
          sed -i 's/^android\.targetSdkVersion=.*/android.targetSdkVersion=36/g'   "$G" || true
          grep -q '^android.useAndroidX=true'    "$G" || echo 'android.useAndroidX=true'    >> "$G"
          grep -q '^android.enableJetifier=true' "$G" || echo 'android.enableJetifier=true' >> "$G"
          chmod +x "${APP_PATH}/android/gradlew" || true

      - name: Build APK (Debug)
        working-directory: ${{ env.APP_PATH }}/android
        run: ./gradlew assembleDebug --no-daemon --stacktrace | tee "${LOG_DIR}/gradle-debug.log"

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: ${{ env.APP_PATH }}/android/app/build/outputs/apk/debug/app-debug.apk
          if-no-files-found: ignore

      - name: Build APK (Release unsigned)
        working-directory: ${{ env.APP_PATH }}/android
        run: ./gradlew assembleRelease --no-daemon --stacktrace | tee "${LOG_DIR}/gradle-release.log"

      - name: Upload Release APK (unsigned)
        uses: actions/upload-artifact@v4
        with:
          name: app-release-unsigned-apk
          path: ${{ env.APP_PATH }}/android/app/build/outputs/apk/release/app-release-unsigned.apk
          if-no-files-found: ignore

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: ${{ env.APP_PATH }}/_logs/*.log
          if-no-files-found: warn
